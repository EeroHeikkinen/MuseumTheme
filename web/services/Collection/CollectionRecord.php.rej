***************
*** 25,38 ****
   * @license  http://opensource.org/licenses/gpl-2.0.php GNU General Public License
   * @link     http://vufind.org/wiki/building_a_module Wiki
   */
- require_once 'Action.php';
  
- require_once 'sys/Language.php';
- 
- require_once 'RecordDrivers/Factory.php';
- require_once 'sys/ResultScroller.php';
- require_once 'sys/VuFindDate.php';
- 
  /**
   * Collection Record module.
   *
--- 25,32 ----
   * @license  http://opensource.org/licenses/gpl-2.0.php GNU General Public License
   * @link     http://vufind.org/wiki/building_a_module Wiki
   */
+ require_once 'Collection.php';
  
  /**
   * Collection Record module.
   *
***************
*** 42,55 ****
   * @license  http://opensource.org/licenses/gpl-2.0.php GNU General Public License
   * @link     http://vufind.org/wiki/building_a_module Wiki
   */
- class CollectionRecord extends Action
  {
-     protected $recordDriver;
-     protected $cacheId;
-     protected $db;
-     protected $catalog;
-     protected $errorMsg;
-     protected $infoMsg;
      protected $searchObject;
      protected $collection_id;
      protected $id;
--- 36,43 ----
   * @license  http://opensource.org/licenses/gpl-2.0.php GNU General Public License
   * @link     http://vufind.org/wiki/building_a_module Wiki
   */
+ class CollectionRecord extends Collection
  {
      protected $searchObject;
      protected $collection_id;
      protected $id;
***************
*** 62,292 ****
       */
      public function __construct()
      {
          global $configArray;
          global $interface;
-         global $action;
-         global $user;
  
-         // Setup Search Engine Connection
-         $this->db = ConnectionManager::connectToIndex();
  
-         $collections = $this->getCollections($_REQUEST['collection']);
-         if (is_array($collections) && count($collections) >= 2) {
-             //need to show disambiguation page
-             // pass the collections to the interface, allong with some of
-             // its fields for easier access
-             $interface->assign('collections', $collections);
-             $interface->setTemplate('disambiguation.tpl');
-             $interface->display('layout.tpl');
-             die();
-         } else if (is_array($collections) && count($collections) == 1) {
-             $collection = $collections[0];
  
-             $this->id = $collection['id'];
-             $this->collection_id = $collection['is_collection_id'];
-             $name = $collection['is_collection'];
  
-             // pass collection fields to the  interface
-             $interface->assign('id', $this->id);
-             $interface->assign('collectionName', urlencode($name));
-             $interface->assign('collectionID', $this->collection_id);
- 
-             $interface->assign('collectionAction', $action);
- 
-             // Connect to Database
-             $this->catalog = ConnectionManager::connectToCollection();
- 
-             // Set up object for formatting dates and times:
-             $this->dateFormat = new VuFindDate();
- 
-             // Register Library Catalog Account
-             if (isset($_POST['submit']) && !empty($_POST['submit'])) {
-                 if (isset($_POST['cat_username'])
-                     && isset($_POST['cat_password'])
-                 ) {
-                     $result = UserAccount::processCatalogLogin(
-                         $_POST['cat_username'], $_POST['cat_password']
-                     );
-                     if ($result) {
-                         $interface->assign('user', $user);
-                     } else {
-                         $interface->assign('loginError', 'Invalid Patron Login');
-                     }
-                 }
-             }
- 
-             // Retrieve the record from the index
-             if (!($record = $this->db->getRecord($this->id))) {
-                 PEAR::raiseError(new PEAR_Error('Record Does Not Exist'));
-             }
-             $this->recordDriver = RecordDriverFactory::initRecordDriver($record);
- 
-             if ($this->recordDriver->hasRDF()) {
-                 $interface->assign(
-                     'addHeader', '<link rel="alternate" type="application/rdf+xml" ' .
-                     'title="RDF Representation" href="' . $configArray['Site']['url'] .
-                     '/Record/' . urlencode($this->id) . '/RDF" />' . "\n"
-                 );
-             }
- 
-             //Set the page Title
-             $interface->setPageTitle(
-                 translate('Collection') . ': ' . $this->recordDriver->getBreadcrumb()
-             );
- 
-             $interface->assign('info', 'Collection/info.tpl');
-             $this->recordDriver->getCollectionMetadata();
- 
-             $this->hasArchivalTree = $this->recordDriver->hasArchivalTree();
-             // Set flags that control which tabs are displayed:
-             //archival tree
-             if (isset($configArray['Content']['archivaltree'])) {
-                 $interface->assign('hasArchivalTree', $this->hasArchivalTree);
-             }
- 
-             // Retrieve User Search History
              $interface->assign(
-                 'lastsearch',
-                 isset($_SESSION['lastSearchURL'])
-                 ? $_SESSION['lastSearchURL'] : false
              );
  
-             // Send down text for inclusion in breadcrumbs
-             $interface->assign('breadcrumbText', $this->recordDriver->getBreadcrumb());
  
-             // Send down OpenURL for COinS use:
-             $interface->assign('openURL', $this->recordDriver->getOpenURL());
  
-             // Set AddThis User
-             $interface->assign(
-                 'addThis', isset($configArray['AddThis']['key'])
-                 ? $configArray['AddThis']['key'] : false
-             );
  
-             //get the records part of this collection
-             $this->searchObject
-                 = SearchObjectFactory::initSearchObject("SolrCollection");
-             //set the searchobjects collection id to the collection id
-             //$this->collection_id
-             $this->searchObject->collectionID($this->collection_id);
-             $this->searchObject->init();
-             $result = $this->searchObject->processSearch(false, true);
-             //echo '<br/>printing the result of records in this collection (~187)<br/>';
-             //print_r(array_keys($result['response']));//['docs'][0]));//array_keys
-             //echo '<br/>';
-             if (PEAR::isError($result)) {
-                 PEAR::raiseError($result->getMessage());
-             }
  
-             $interface->assign(
-                 'topRecommendations',
-                 $this->searchObject->getRecommendationsTemplates('top')
-             );
-             $interface->assign(
-                 'sideRecommendations',
-                 $this->searchObject->getRecommendationsTemplates('side')
-             );
  
-             //$this->items = $result['response']['docs'];
-             $interface->assign(
-                 'recordSet', $this->searchObject->getResultRecordHTML()
-             );
  
-             //we can get the facets now
-             $facetSet = $this->searchObject->getFacetList();
-             $searchParams = '?lookfor=';
-             $filterList = $this->searchObject->getFilters();
-             if (count($filterList) > 0) {
-                 foreach ($filterList as $field => $filter) {
-                     if ($field != "in_collection_id") {
-                         foreach ($filter as $value) {
-                             $searchParams .= "&filter[]=" . urlencode("$field:\"$value\"");
-                         }
-                     }
-                 }
-             }
-             $interface->assign('filters', $searchParams);
  
-             $interface->assign('facetSet', $facetSet);
  
-             $interface->setTemplate('collectionview.tpl');
- 
-         } else {
-             Header(
-                 "Location:" .
-                 $configArray['Site']['url'] .
-                 '/Search/Results?lookfor=&type=AllFields&filter[]=in_collection%3A"'
-                 . $_REQUEST['collection'] . '"&collection=true'
-             );
-         }
- 
-         // Set Proxy URL
-         if (isset($configArray['EZproxy']['host'])) {
-                $interface->assign('proxy', $configArray['EZproxy']['host']);
-         }
-         // Get Messages
-         $this->infoMsg = isset($_GET['infoMsg']) ? $_GET['infoMsg'] : false;
-         $this->errorMsg = isset($_GET['errorMsg']) ? $_GET['errorMsg'] : false;
-         // Set Messages
-         $interface->assign('infoMsg', $this->infoMsg);
-         $interface->assign('errorMsg', $this->errorMsg);
      }
  
      /**
-      * get the collection ID, this will return an array
       *
-      * @param string $name The Name of the Collection
-      *
-      * @return array $collections An array of Collection Information
-      * @access protected
-      */
-     protected function getCollections($name)
-     {
-         $collections = $this->db->getCollectionsFromName($name);
-         return $collections;
-     }
- 
- 
-     /**
-      * Record a record hit to the statistics index when stat tracking is enabled;
-      * this is called by the Home action.
-      *
       * @return void
       * @access public
       */
-     public function recordHit()
      {
          global $configArray;
  
-         if ($configArray['Statistics']['enabled']) {
-             // Setup Statistics Index Connection
-             $solrStats = ConnectionManager::connectToIndex('SolrStats');
  
-             // Save Record View
-             $solrStats->saveRecordView($this->recordDriver->getUniqueID());
-             unset($solrStats);
          }
-     }
  
-     /**
-      * Gets An individual Collection Record
-      *
-      * @param string $id The Collection Record ID
-      *
-      * @return mixed "unknown" if the record doesn't exist, the location of a
-      * template file on success
-      * @access protected
-      */
-     public function getRecord($id)
-     {
-         global $interface;
-         // Retrieve the record from the index
-         if (!($record = $this->db->getRecord($id))) {
-             return "unknown";
-         } else {
-             $recordDriver = RecordDriverFactory::initRecordDriver($record);
-             return $recordDriver->getCollectionRecord();
          }
      }
  }
  
--- 50,191 ----
       */
      public function __construct()
      {
+         parent::__construct();
+         $this->initCollection();
+         $this->initCollectionFacets();
+     }
+ 
+     /**
+      * Set Up Collection Record
+      *
+      * @return void
+      * @access public
+      */
+     public function initCollection()
+     {
          global $configArray;
          global $interface;
  
+         $collection = $this->collections[0];
+         $this->id = $collection['id'];
+         $this->collection_id = $collection['is_collection_id'];
+         $name = $collection['is_collection'];
  
+         // Pass collection fields to the  interface
+         $interface->assign('id', $this->id);
+         $interface->assign('collectionName', urlencode($name));
+         $interface->assign('collectionID', $this->collection_id);
+         $interface->assign('collectionAction', $action);
  
+         // Retrieve the record from the index
+         if (!($record = $this->db->getRecord($this->id))) {
+             PEAR::raiseError(new PEAR_Error('Record Does Not Exist'));
+         }
+         $this->recordDriver = RecordDriverFactory::initRecordDriver($record);
  
+         if ($this->recordDriver->hasRDF()) {
              $interface->assign(
+                 'addHeader', '<link rel="alternate" type="application/rdf+xml" ' .
+                 'title="RDF Representation" href="' . $configArray['Site']['url'] .
+                 '/Record/' . urlencode($this->id) . '/RDF" />' . "\n"
              );
+         }
  
+         //Set the page Title
+         $interface->setPageTitle(
+             translate('Collection') . ': ' . $this->recordDriver->getBreadcrumb()
+         );
  
+         $interface->assign('info', $this->recordDriver->getCollectionMetadata());
  
+         $this->hasArchivalTree = $this->recordDriver->hasArchivalTree();
  
+         // Set flags that control which tabs are displayed:
+         //archival tree
+         if (isset($configArray['Content']['archivaltree'])) {
+             $interface->assign('hasArchivalTree', $this->hasArchivalTree);
+         }
  
+         // Retrieve User Search History
+         $interface->assign(
+             'lastsearch',
+             isset($_SESSION['lastSearchURL'])
+             ? $_SESSION['lastSearchURL'] : false
+         );
  
+         // Send down text for inclusion in breadcrumbs
+         $interface->assign('breadcrumbText', $this->recordDriver->getBreadcrumb());
  
+         // Send down OpenURL for COinS use:
+         $interface->assign('openURL', $this->recordDriver->getOpenURL());
  
+         // Set AddThis User
+         $interface->assign(
+             'addThis', isset($configArray['AddThis']['key'])
+             ? $configArray['AddThis']['key'] : false
+         );
  
+         // Set Default View Template
+         $interface->setTemplate('view.tpl');
      }
  
      /**
+      * Set Up Collection Facets
       *
       * @return void
       * @access public
       */
+     public function initCollectionFacets()
      {
+         global $interface;
          global $configArray;
  
+         // Get the records part of this collection
+         $this->searchObject
+             = SearchObjectFactory::initSearchObject("SolrCollection");
+         // Set the searchobjects collection id to the collection id
+         $this->searchObject->collectionID($this->collection_id);
+         $this->searchObject->init();
  
+         $result = $this->searchObject->processSearch(false, true);
+         if (PEAR::isError($result)) {
+             PEAR::raiseError($result->getMessage());
          }
  
+         $interface->assign(
+             'topRecommendations',
+             $this->searchObject->getRecommendationsTemplates('top')
+         );
+         $interface->assign(
+             'sideRecommendations',
+             $this->searchObject->getRecommendationsTemplates('side')
+         );
+         $interface->assign(
+             'recordSet', $this->searchObject->getResultRecordHTML()
+         );
+ 
+         // We can get the facets now
+         $facetSet = $this->searchObject->getFacetList();
+         $searchParams = '?lookfor=';
+         $filterList = $this->searchObject->getFilters();
+         if (count($filterList) > 0) {
+             foreach ($filterList as $field => $filter) {
+                 if ($field != "in_collection_id") {
+                     foreach ($filter as $value) {
+                         $searchParams
+                             .= "&filter[]=" . urlencode("$field:\"$value\"");
+                     }
+                 }
+             }
          }
+ 
+         $interface->assign('filters', $searchParams);
+         $interface->assign('facetSet', $facetSet);
+ 
+         // Set Proxy URL
+         if (isset($configArray['EZproxy']['host'])) {
+                $interface->assign('proxy', $configArray['EZproxy']['host']);
+         }
      }
  }
  
