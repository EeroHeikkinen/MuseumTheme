<?php
/**
 * Home action for Collection module
 *
 * PHP version 5
 *
 * Copyright (C) Villanova University 2007.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * @category VuFind
 * @package  Controller_Record
 * @author   Lutz Biedinger <lutz.biedinger@gmail.com>
 * @license  http://opensource.org/licenses/gpl-2.0.php GNU General Public License
 * @link     http://vufind.org/wiki/building_a_module Wiki
 */
require_once 'CollectionRecord.php';
require_once 'CollectionList.php';
require_once 'CollectionMap.php';
require_once 'ArchivalTree.php';

/**
 * Home action for Collection module
 *
 * @category VuFind
 * @package  Controller_Record
 * @author   Lutz Biedinger <lutz.biedinger@gmail.com>
 * @license  http://opensource.org/licenses/gpl-2.0.php GNU General Public License
 * @link     http://vufind.org/wiki/building_a_module Wiki
 */
class Home extends Collection
{
    /**
     * Process incoming parameters and display the page.
     *
     * @return void
     * @access public
     */
    public function launch()
    {
        global $configArray;
        global $interface;
        global $action;

        if (is_array($this->collections) && count($this->collections) >= 2) {
            $this->showDisambiguation();
        } elseif (is_array($this->collections) && count($this->collections) == 1) {
            $this->showDefaultTab();
        } elseif ($action == "Home") {
            $this->showBrowse();
        } else {
            Header(
                "Location:" .
                $configArray['Site']['url'] .
                '/Search/Results?lookfor=&type=AllFields&filter[]=in_collection%3A"'
                . $_REQUEST['collection'] . '"&collection=true'
            );
        }
    }

    /**
     * Show the default
     *
     * @return void
     * @access public
     */
    public function showDefaultTab()
    {
        global $configArray;

        // Choose Default Tab
        $serviceName = (isset($configArray['Collections']['defaultTab'])) ?
                $configArray['Collections']['defaultTab'] : 'CollectionList';

        if ($serviceName == "ArchivalTree" && !$this->hasArchivalTree) {
            $serviceName = 'CollectionList';
        }

        $service = new $serviceName();
        $service->recordHit();
        $service->launch();
    }

    /**
     * Show the disambiguation details
     *
     * @return void
     * @access public
     */
    public function showDisambiguation()
    {
        global $interface;

        // need to show disambiguation page
        // pass the collections to the interface, along with some of
        // its fields for easier access
        $interface->assign('collections', $collections);
        $interface->setTemplate('disambiguation.tpl');
        $interface->display('layout.tpl');
    }

    /**
     * Show the Browse Menu
     *
     * @return void
     * @access public
     */
    public function showBrowse()
    {
        global $configArray;
        global $interface;
        // Process incoming parameters:
        $source = "hierarchy";
        $from = isset($_GET['from']) ? $_GET['from'] : '';
        $page = (isset($_GET['page']) && is_numeric($_GET['page']))
            ? $_GET['page'] : 0;
        $limit = isset($configArray['AlphaBrowse']['page_size'])
            ? $configArray['AlphaBrowse']['page_size'] : 20;

        // If required parameters are present, load results:
        if ($source && $from !== false) {
            // Load Solr data or die trying:
            $result = $this->db->alphabeticBrowse(
                $source, $from, $page, $limit, true
            );
            $this->checkError($result);

            // No results?  Try the previous page just in case we've gone past the
            // end of the list....
            if ($result['Browse']['totalCount'] == 0) {
                $page--;
                $result = $this->db->alphabeticBrowse(
                    $source, $from, $page, $limit, true
                );
                $this->checkError($result);
            }

            // Only display next/previous page links when applicable:
            if ($result['Browse']['totalCount'] > $limit) {
                $interface->assign('nextpage', $page + 1);
            }
            if ($result['Browse']['offset'] + $result['Browse']['startRow'] > 1) {
                $interface->assign('prevpage', $page - 1);
            }
            // Send other relevant values to the template:
            $interface->assign('source', $source);
            $interface->assign('from', $from);
            $interface->assign('result', $result);
        }

        $legalLetters = $this->getAlphabetList();
        $interface->assign('letters', $legalLetters);

        // Display the page:
        $interface->setPageTitle('Browse the Collection Alphabetically');
        $interface->setTemplate('browse.tpl');
        $interface->display('layout.tpl');
    }

    /**
     * Get a list of initial letters to display.
     *
     * @return array
     * @access protected
     */
    protected function getAlphabetList()
    {
        return array('0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
            'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z');
    }

    /**
     * Given an alphabrowse response, die with an error if necessary.
     *
     * @param array $result Result to check.
     *
     * @return void
     * @access protected
     */
    protected function checkError($result)
    {
        if (isset($result['error'])) {
            // Special case --  missing alphabrowse index probably means the
            // user could use a tip about how to build the index.
            if (strstr($result['error'], 'does not exist')
                || strstr($result['error'], 'no such table')
                || strstr($result['error'], 'couldn\'t find a browse index')
            ) {
                $result['error'] = "Alphabetic Browse index missing.  See " .
                    "http://vufind.org/wiki/alphabetical_heading_browse for " .
                    "details on generating the index.";
            }
            PEAR::raiseError(new PEAR_Error($result['error']));
        }
    }
}

?>
